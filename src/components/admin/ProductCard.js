import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { Edit, Trash2, Package } from 'lucide-react';
import DOMPurify from 'dompurify';
export const ProductCard = ({ product, onEdit, onDelete, onToggleAvailability }) => {
    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
    const sanitizedDescription = useMemo(() => DOMPurify.sanitize(product.description || ''), [product.description]);
    return (_jsxs(Card, { className: "flex flex-col", children: [product.image_url && (_jsx("img", { src: product.image_url, alt: product.name, className: "w-full h-48 object-cover rounded-t-lg" })), _jsx(CardHeader, { className: "flex-grow-0", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx(CardTitle, { className: "text-lg", children: product.name }), _jsx(Badge, { variant: product.availability_status === 'Available' ? "default" : product.availability_status === 'Low Stock' ? "outline" : "secondary", children: product.availability_status ? product.availability_status : 'Unknown' })] }) }), _jsxs(CardContent, { className: "flex-grow flex flex-col justify-between", children: [_jsxs("div", { className: "space-y-3 mb-4", children: [_jsx("p", { className: "text-sm text-gray-600 h-16 overflow-y-auto", dangerouslySetInnerHTML: { __html: sanitizedDescription || 'No description available.' } }), _jsxs("div", { className: "text-sm text-gray-500", children: ["Category: ", product.category || 'Uncategorized'] }), _jsxs("div", { className: "text-sm text-gray-500", children: ["Sub-Category: ", product.sub_category || 'N/A'] }), _jsxs("div", { className: "text-sm text-gray-500", children: ["Stock: ", product.stock_quantity] }), _jsxs("div", { className: "text-lg font-bold text-green-600", children: ["$", Number(product.price_per_day).toFixed(2), "/day"] })] }), _jsxs("div", { className: "flex gap-2 pt-2 border-t mt-auto", children: [_jsxs(Button, { variant: "outline", size: "sm", className: "flex-1", onClick: () => onEdit(product), children: [_jsx(Edit, { className: "h-4 w-4 mr-1" }), "Edit"] }), _jsxs(Button, { variant: "outline", size: "sm", onClick: () => onToggleAvailability(product), children: [_jsx(Package, { className: "h-4 w-4 mr-1" }), product.availability_status === 'Available' ? 'Set Out of Stock' : 'Set Available'] }), _jsxs(AlertDialog, { open: isDeleteDialogOpen, onOpenChange: setIsDeleteDialogOpen, children: [_jsx(AlertDialogTrigger, { asChild: true, children: _jsx(Button, { variant: "destructive", size: "sm", children: _jsx(Trash2, { className: "h-4 w-4" }) }) }), _jsxs(AlertDialogContent, { children: [_jsxs(AlertDialogHeader, { children: [_jsx(AlertDialogTitle, { children: "Are you sure?" }), _jsxs(AlertDialogDescription, { children: ["This action cannot be undone. This will permanently delete the product \"", product.name, "\"."] })] }), _jsxs(AlertDialogFooter, { children: [_jsx(AlertDialogCancel, { children: "Cancel" }), _jsx(AlertDialogAction, { onClick: () => onDelete(product), children: "Delete" })] })] })] })] })] })] }, product.id));
};
